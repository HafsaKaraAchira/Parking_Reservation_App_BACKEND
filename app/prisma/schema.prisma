generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Horaire {
  horaireID        Int       @id @default(autoincrement())
  parkingID        Int?
  fermetureHoraire DateTime? @db.Time
  ouvertureHoraire DateTime? @db.Time
  weekDay          DayType?
  Parking          Parking?  @relation(fields: [parkingID], references: [parkingID], onDelete: NoAction, onUpdate: NoAction, map: "Parking")
}

model Note {
  utilisateurID Int
  parkingID     Int
  note          Int?
  commentaire   String?
  Parking       Parking     @relation(fields: [parkingID], references: [parkingID], onDelete: NoAction, onUpdate: NoAction, map: "parkingID")
  Utilisateur   Utilisateur @relation(fields: [utilisateurID], references: [utilisateurID], onDelete: NoAction, onUpdate: NoAction, map: "UtilisateurID")

  @@id([utilisateurID, parkingID])
}

model Parking {
  parkingID              Int           @id @default(autoincrement())
  nom                    String?
  commune                String?
  photo                  String?
  unitPrice              Float?        @db.Real
  longitude              Float?        @db.Real
  latitude               Float?        @db.Real
  reservedPositionsNum   Int?
  totalPositionsNum      Int?
  availablePositionsList String[]
  Horaire                Horaire[]
  Note                   Note[]
  Reservation            Reservation[]
}

model Reservation {
  reservationID    Int          @id @default(autoincrement())
  utilisateurID    Int?
  parkingID        Int?
  entryTime        DateTime?    @db.Time
  exitTime         DateTime?    @db.Time
  date             DateTime?    @db.Date
  reservedPosition String?
  qrCode           String?
  paiement         Int?
  Parking          Parking?     @relation(fields: [parkingID], references: [parkingID], onDelete: NoAction, onUpdate: NoAction, map: "parkingID")
  Utilisateur      Utilisateur? @relation(fields: [utilisateurID], references: [utilisateurID], onDelete: NoAction, onUpdate: NoAction, map: "utilisateurID")
  Paiement         Paiement?    @relation(fields: [paiement], references: [paiementID], onDelete: NoAction, onUpdate: NoAction, map: "paiementID")
}

model Paiement {
  paiementID     Int           @id @default(autoincrement())
  estimatedPrice Float?        @db.Real
  realExitTime   DateTime?     @db.Time
  paidPrice      Float?        @default(0) @db.Real
  Reservation    Reservation?
}

model Utilisateur {
  utilisateurID Int           @id @default(autoincrement())
  nom           String?
  prenom        String?
  email         String?       @unique
  telephone     String?
  motDePasse    String?
  Note          Note[]
  Reservation   Reservation[]
}

enum DayType {
  Dimanche
  Lundi
  Mardi
  Mercredi
  Jeudi
  Vendredi
  Samedi
}
